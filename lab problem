/*
#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

struct Stack {
    int data[MAX_SIZE];
    int top;
};


void initialize(struct Stack *s) {
    s->top = -1;
}
 int isEmpty(struct Stack *s) {
    return s->top == -1;
}


int isFull(struct Stack *s) {
    return s->top == MAX_SIZE - 1;
}


void push(struct Stack *s, int value) {
    if (isFull(s)) {
        printf("Stack is full. Cannot push.\n");
        return;
    }
    s->data[++s->top] = value;
}


int pop(struct Stack *s) {
    if (isEmpty(s)) {
        printf("Stack is empty. Cannot pop.\n");
        return -1;
    }
    return s->data[s->top--];
}


struct Queue {
    struct Stack stack1;
    struct Stack stack2;
};


void initQueue(struct Queue *q) {
    initialize(&q->stack1);
    initialize(&q->stack2);
}

void enqueue(struct Queue *q, int value) {
    // Push all elements from stack1 to stack2
    while (!isEmpty(&q->stack1)) {
        push(&q->stack2, pop(&q->stack1));
    }

    push(&q->stack1, value);

    while (!isEmpty(&q->stack2)) {
        push(&q->stack1, pop(&q->stack2));
    }
}


int dequeue(struct Queue *q) {
    if (isEmpty(&q->stack1)) {
        printf("Queue is empty. Cannot dequeue.\n");
        return -1;
    }
    return pop(&q->stack1);
}

int main() {
    struct Queue q;
    initQueue(&q);

    enqueue(&q, 1);
    enqueue(&q, 2);
    enqueue(&q, 3);

    printf("Dequeued: %d\n", dequeue(&q));
    printf("Dequeued: %d\n", dequeue(&q));
    printf("Dequeued: %d\n", dequeue(&q));

    return 0;
}
*/
/*
#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100


struct Stack {
    int data[MAX_SIZE];
    int top;
};


void init(struct Stack *s) {
    s->top = -1;
}


void push(struct Stack *s, int value) {
    if (s->top == MAX_SIZE - 1) {
        printf("Stack is full. Cannot push %d\n", value);
        return;
    }
    s->data[++s->top] = value;
}


int pop(struct Stack *s) {
    if (s->top == -1) {
        printf("Stack is empty.\n");
        return -1;
    }
    return s->data[s->top--];
}


void reverseArray(int arr[], int size) {
    struct Stack stack;
    init(&stack);

  
    for (int i = 0; i < size; i++) {
        push(&stack, arr[i]);
    }

   
    for (int i = 0; i < size; i++) {
        arr[i] = pop(&stack);
    }
}

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int size = sizeof(arr) / sizeof(arr[0]);

    printf("Original Array: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    reverseArray(arr, size);

    printf("Reversed Array: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}
*/
/*
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};
void removeDuplicates(struct Node* head) {
    struct Node* current = head;
    
    while (current != NULL && current->next != NULL) {
        if (current->data == current->next->data) {
            // Skip the duplicate node
            struct Node* nextNode = current->next;
            current->next = nextNode->next;
            free(nextNode);
        } else {
            current = current->next;
        }
    }
}


void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf("%d -> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* head = NULL;
    
    
    head = (struct Node*)malloc(sizeof(struct Node));
    head->data = 1;
    head->next = (struct Node*)malloc(sizeof(struct Node));
    head->next->data = 1;
    head->next->next = (struct Node*)malloc(sizeof(struct Node));
    head->next->next->data = 2;
    head->next->next->next = (struct Node*)malloc(sizeof(struct Node));
    head->next->next->next->data = 2;
    head->next->next->next->next = NULL;
    
    printf("Original Linked List: ");
    printList(head);
    
    removeDuplicates(head);
    
    printf("Linked List after removing duplicates: ");
    printList(head);
    
    return 0;
}
*/
